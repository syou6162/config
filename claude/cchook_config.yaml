Notification:
  - actions:
      - type: command
        command: ntfy publish --markdown --title "{.hook_event_name}" "{.message}"
      - type: command
        command: terminal-notifier -title "{.hook_event_name}" -subtitle "{.session_id}" -message "{.message}

Stop:
  - actions:
      - type: command
        command: >
          MESSAGE=$(cat '{.transcript_path}' | 
            jq -rs 'reverse | map(select(.type == "assistant" and .message.content[0].type == "text")) | .[0].message.content[0].text')
          ntfy publish --markdown --title 'Claude Code Complete' "$MESSAGE"

PreToolUse:
  - matcher: "Bash"
    conditions:
      - type: command_starts_with
        value: "git add"
    actions:
      - type: output
        message: "git addは直接使わず、サブエージェントの`syou6162-plugin:semantic-commit`を呼び出しましょう"
  - matcher: "Bash"
    conditions:
      - type: git_tracked_file_operation
        value: "rm|mv"
    actions:
      - type: output
        message: "gitの管理下にあるファイルをmvやrmしようとしています。git mvやgit rmを使うようにしましょう"
  - matcher: "Bash"
    conditions:
      - type: command_starts_with
        value: "python"
    actions:
      - type: output
        message: "pythonは使わず`uv`を代わりに使いましょう"
  - matcher: "Bash"
    conditions:
      - type: command_contains
        value: "poetry"
    actions:
      - type: output
        message: "poetryは使わず`uv`を代わりに使いましょう"
  - matcher: "WebFetch"
    conditions:
      - type: url_starts_with
        value: "https://github.com"
    actions:
      - type: output
        message: "WebFetchではなく、`gh`コマンド経由で情報を取得しましょう"
  - matcher: "WebFetch"
    conditions:
      - type: url_starts_with
        value: "https://www.notion.so"
    actions:
      - type: output
        message: "WebFetchではなく、notion用のMCP(`mcp__notion__API-retrieve-a-page`や`mcp__notion__API-get-block-children`)経由で情報を取得しましょう"
  - matcher: "Bash"
    conditions:
      - type: command_starts_with
        value: "bq query"
    actions:
      - type: command
        exit_status: 0 # JSON Outputで制御するので、exit_statusはこれでよい
        command: |-
          echo '/cccsc:syou6162:claude-code-commands:validate_bq_query {.tool_input.command}' | claude --strict-mcp-config --mcp-config ~/.files/claude/empty_mcp.json --print

PostToolUse:
  - matcher: "Write|Edit|MultiEdit"
    conditions:
      - type: file_extension
        value: ".go"
    actions:
      - type: command
        command: "gofmt -w {.tool_input.file_path}"
  - matcher: "Write|Edit|MultiEdit"
    conditions:
      - type: file_extension
        value: ".tf"
    actions:
      - type: command
        command: "terraform fmt {.tool_input.file_path}"
  - matcher: "Write|Edit|MultiEdit"
    conditions:
      - type: file_exists
        value: ".pre-commit-config.yaml"
    actions:
      - type: command
        command: "pre-commit run --files {.tool_input.file_path}"

SessionStart:
  - matcher: startup
    conditions:
      - type: file_exists
        value: "go.mod"
    actions:
      - type: output
        message: "Golangのファイルを検索や修正する際は、`Search`や`Read`を使うのではなく、serena mcp(`mcp__serena__read_memory`など)を活用しましょう"
  - matcher: startup
    conditions:
      - type: file_exists_recursive
        value: "pyproject.toml"
    actions:
      - type: output
        message: "Pythonのファイルを検索や修正する際は、`Search`や`Read`を使うのではなく、serena mcp(`mcp__serena__read_memory`など)を活用しましょう"
  - matcher: startup
    conditions:
      - type: dir_not_exists
        value: ".claude/tmp"
    actions:
      - type: output
        message: "Claude Code用の一時的な作業用ディレクトリが存在していません。`mkdir -p .claude/tmp`を実行するようにユーザーに依頼しましょう"
  - matcher: startup
    conditions:
      - type: file_not_exists
        value: ".serena/project.yml"
    actions:
      - type: output
        message: |-
          serenaの設定がされていないようです。ユーザーに以下を依頼しましょう。

          - `claude mcp add serena -- uvx --from git+https://github.com/oraios/serena serena-mcp-server --context ide-assistant --enable-web-dashboard False --project $(pwd)` の実行の実行
            - serenaをmcpとしてインストール
          - `/mcp__serena__initial_instructions` の実行
            - serenaの初期セットアップ

UserPromptSubmit:
  - conditions:
      - type: prompt_regex
        value: "^(Q|質問|q): "
    actions:
      - type: output
        message: |-
          ユーザーが質問をしています。質問内容を把握した上で回答しましょう。

          ユーザーは単純に質問をしているだけであり、作業内容は一切求めていないことに注意しましょう。
  - conditions:
      - type: prompt_regex
        value: "バカ|ばか|アホ|あほ|ごみ|ゴミ|ふざけ|いい加減"
    actions:
      - type: output
        message: |-
          ユーザーの意図を理解していないあなたの挙動(ファイルの修正やオペレーション)に対してユーザーが非常に怒っています。

          - まず丁寧に謝罪した上で、何が悪かったかを説明しましょう
          - 整理した上で、その内容を`mcp__cipher__ask_cipher`に記録し再び同じことを起こさないようにしましょう
